% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ens_random_forests.R
\name{ens_random_forests}
\alias{ens_random_forests}
\title{Ensemble Random Forests}
\usage{
ens_random_forests(
  df,
  var,
  covariates,
  header = NULL,
  out.folder = NULL,
  duplicate = TRUE,
  n.forests = 10L,
  importance = TRUE,
  cores = parallel::detectCores() - 2,
  save = TRUE,
  ntree = 1000,
  mtry = 5,
  var.q = c(0.1, 0.5, 0.9),
  mode = "bin",
  weights = NULL
)
}
\arguments{
\item{df}{A data.frame object}

\item{var}{A character string indicating the column name of the data frame that contains the number of interactions for the ERF to model; column should be a numeric column}

\item{covariates}{A character vector indicating the column name(s) of the data frame that contain the covariates}

\item{header}{A character vector indicating the column name(s) of the data frame that contain the additional columns you wish appended to the output}

\item{out.folder}{A path to the folder to write out too. If NULL then a folder is generated in the working directory}

\item{duplicate}{A logical flag that indicates whether to duplicate observations with more than one interaction. Default is TRUE to duplicate all records that interacted with more than one individual (i.e. a fishing set that caught two of the same species)}

\item{n.forests}{An integer value indicating how many Random Forests to generate in the ensemble, default is 100}

\item{importance}{A logical flag for the randomForest model to calculate the variable importance}

\item{cores}{A integer value that either indicates the number of cores to use for parallel processing or a negative value to indicate the number of cores to leave free. Default is to leave two cores free.}

\item{save}{A logical flag to save the output as an RData object, default is TRUE.}

\item{ntree}{The number of decision trees to use in each RF, default is 1000}

\item{mtry}{The number of covariates to try at each node split, default is 5}

\item{var.q}{The quantiles for the distribution of the variable importance; only exectuted if importance=TRUE}

\item{mode}{is either 'bin' for binary or if not, then assumed to be multivariate factor, 'bin' is set by default}

\item{weights}{a vector equal in length to nrow(df) of weights, NULL by default}
}
\value{
A list containing the fitted ERF model and associated output.
\itemize{
\item \strong{data}: the exact dataset used to fit each Random Forests within the ensemble. At the minimum, it will contain \code{var}, \code{covariates}, and \code{header} if provided. If \code{duplicate}==\code{TRUE}, then it will also contain the duplicated presence records.
\item \strong{model}: the returned fitted individual Random Forests in the ensemble
\item \strong{ens.pred}: the ensemble model predictions. This is generally the prediction set to use.
\item \strong{ens.perf}: the ensemble model performance metrics including ROC curve.
\item \strong{mu.tr.perf}: the mean training set performance across all Random Forests for the AUC, TSS, and RMSE metrics. These are generally useless.
\item \strong{mu.te.perf}: the mean test set performance across all Random Forests for the AUC, TSS, and RMSE metrics. These can be informative.
\item \strong{roc_train}: the training performance metrics for each Random Forests in the ensemble
\item \strong{roc_test}: the test performance metrics for each Random Forests in the ensemble
\item \strong{pred}: a list with two objects:
\itemize{
\item \strong{p}: predictions from each Random Forests in the ensemble to the dataset
\item \strong{resid}: residuals between the observed presence/absences and the predictions from each Random Forests in the ensemble to the dataset
}
}
}
\description{
Execute Ensemble Random Forests model on a given dataset
}
\examples{
#run an ERF with 10 RFs and 
ens_rf_ex <- ens_random_forests(df=simData$samples, var="obs",covariates=grep("cov", colnames(simData$samples),value=T), save=FALSE, cores=1)

# view the dataset used in the model
head(ens_rf_ex$data) 

#view the model predictions
head(ens_rf_ex$ens.pred) 

#view the mean test threshold-free performance metrics
ens_rf_ex$mu.te.perf 

#view the threshold-free ensemble performance metrics
unlist(ens_rf_ex$ens.perf[c('auc','rmse','tss')]) 

}
